var async = require('async');
var dreamer = require('dreamer').instance;
var models = dreamer.models;
var Deferrals = require('./deferrals');
var Collection = require('./collection.tjs');
var Fields = require('./fields.js');
var validators = require('validator').validators;
var ItemData = require('./item-data');
var escape = require('./escape');
var moment = require('moment');

var _success = function(data) { flatten(data); };
var _error = function(err) { console.warn(err); };

var Item = function(args) {};

Item.find = function(args) {

	var id = args.id;
	if (!id) throw new Error("`id` is required");

	var item, collection, users;

	var success = args.success || _success;
	var error = args.error || _error;

	await {

		var deferrals = new Deferrals(defer(), defer(), defer());

		models.items.find({ where: { id: id } })
			.error(error)
			.success(function(_item) {
				item = _item;
				deferrals.run();
			});

		ItemData.find({
			item_id: id,
			success: function(_item_data) {
				item_data = _item_data;
				deferrals.run();
			}
		});

		models.users.findAll()
			.error(function() { console.log(arguments); })
			.success(function(_users) {
				users = _users;
				deferrals.run();
			});
	}

	item.updated_username = users
		.filter(function(user) { return user.id == item_data.user_id; }) 
		.shift()
		.username;

	item.updated_relative_time = moment(item.update_time).fromNow();

	item.data = item_data.data;

	await {

		var deferrals = new Deferrals(defer());

		Collection.find({
			id: item.collection_id,
			error: error,
			success: function(_collection) {
				collection = _collection;
				deferrals.run();
			}
		});
	}

	item._collection = collection;

	collection.fields.forEach(function(field) {
		item[field.name] = item.data[field.id];
	});

	Item._inflate(item, function(item) {
		success(item);
	});
};

Item.findAll = function(args) {

	var items, items_data, collection, count;

	var collection_id = args.collection_id;
	if (!collection_id) throw new Error("`collection_id` is required");

	var criteria = args.criteria || {};

	var success = args.success || function() {};
	var error = args.error || _error;

	var per_page = args.per_page || 10;
	var page = args.page || 1;

	var offset = (page - 1) * per_page;
	var limit = per_page;

	await {
		var deferrals = new Deferrals(defer(), defer());

		var find_args = { where: { collection_id: collection_id }, order: 'id desc' };

		if (!criteria) {
			find_args.offset = offset;
			find_args.limit = limit;
		}

		models.items.findAll(find_args)
			.error(error)
			.success(function(_items) {
				items = _items;
				deferrals.run();
			});

		models.items.count({ where: { collection_id: collection_id } })
			.error(error)
			.success(function(_count) {
				count = _count;
				deferrals.run();
			});
	}

	if (!items) {
		return success([]);
	}

	await {
		var deferrals = new Deferrals(defer());

		Collection.find({
			id: collection_id,
			success: function(_collection) {
				collection = _collection;
				deferrals.run();
			}
		});
	}

	await {
		var deferrals = new Deferrals(defer());

		var ids = items.map(function(i) { return i.id; });

		ItemData.findAll({
			item_ids: ids,
			error: error,
			success: function(_items_data) {
				items_data = _items_data;
				deferrals.run();
			}
		});
	}

	items = JSON.parse(JSON.stringify(items));

	items.forEach(function(item) {

		var data = items_data[item.id];

		collection.fields.forEach(function(field) {
			item[field.name] = data[field.id];
		});
	});

	if (criteria) {

		items = items.filter(function(item) {
			var failable;
			Object.keys(criteria).forEach(function(key) {
				if (item[key] != criteria[key]) {
					failable = true;
				}
			});
			return !failable;
		});

		var totalCount = items.length;
		items = items.splice(offset, limit);
		items.totalCount = totalCount;

	} else {

		items.totalCount = count;
	}

	items.collection = collection;

	success(items);
};

Item.destroy = function(args) {

	var item_id = args.id;
	if (!item_id) throw new Error("`id` is required");

	var success = args.success || _success;
	var error = args.error || _error;
	var radio = dreamer.app.radio;

	Item.find({
		id: item_id,
		success: function(item) {
			item.destroy()
				.error(error)
				.success(function(deletedItem) {
					success(deletedItem);
					radio.emit('itemDestroy', item);
				});
		}
	});
};

Item.create = function(args) {

	var collection_id = args.collection_id;
	if (!collection_id) throw new Error("`collection_id` is required");

	var status = args.status || 'draft';
	var data = args.data;

	var success = args.success || _success;
	var error = args.error || _error;
	var invalid = args.invalid || _error;
	var radio = dreamer.app.radio;
	var user_id = args.user_id;

	var item, collection;

	await {
		var deferrals = new Deferrals(defer());

		Collection.find({
			id: collection_id,
			error: error,
			success: function(_collection) {
				collection = _collection;
				deferrals.run();
			}
		});
	}

	var item_data = {};

	collection.fields.forEach(function(field) {
		item_data[field.name] = data[field.name];
	});

	collection.fields.forEach(function(field) {
		if (field.control.normalize) {
			item_data[field.name] = field.control.normalize(item_data[field.name]);
		}
	});

	var errors = Item._validate({
		fields: collection.fields,
		data: item_data
	});

	if (errors) {
		item_data._errors = errors;
		item_data._collection = collection;
		return invalid(item_data);
	}

	var item = models.items.build({ collection_id: collection_id, status: status });

	var storable_item_data = {};

	collection.fields.forEach(function(field) {
		storable_item_data[field.id] = item_data[field.name];
	});

	await {
		var deferrals = new Deferrals(defer());

		item.save()
			.error(error)
			.success(function(item) {
				ItemData.create({
					user_id: user_id,
					item_id: item.id,
					data: storable_item_data,
					success: function() {
						deferrals.run();
					}
				});
			});
	}

	Item.find({
		id: item.id,
		collection_id: collection.id,
		success: function(item) {
			success(item);
			radio.emit('itemCreate', item);
		}
	});
}

Item._validate = function(args) {

	var fields = args.fields;
	var data = args.data;
	var errors = {};

	fields.forEach(function(field) {

		if (field.is_required) {
			if (typeof data[field.name] != 'object' && data[field.name] !== null) {
				if (data[field.name] === undefined || (!validators.notEmpty(data[field.name]))) {
					errors[field.name] = "Required";
					return;
				}
			}
		}

		if (data[field.name] !== '') {

			var validator = validators[field.control.validator];
			var is_valid = validator ? validator(data[field.name]) : true;

			if (!is_valid) {
				errors[field.name] = "Failed assertion: " + field.control.validator;
			}
		}
	});

	return Object.keys(errors).length ? errors : null;
}

Item._inflate = function(item, callback) {

	var collection = item._collection;

	async.forEach(collection.fields, function(field, callback) {

		if (field.control.inflate) {
			field.control.inflate(field, item, models, function(value) {
				item[field.name] = value;
				callback();
			});
		} else {
			callback();
		}

	}, function() {
		callback(item);
	});
};

Item._preview = function(item, collection) {

	collection.fields.forEach(function(field) {
		var preview = field.control.preview || escape.html;
		var value = item[field.name];
		item[field.name] = preview(item[field.name], field, item, collection);
	});

	return item;
};

Item.update = function(args) {

	var id = args.id;
	if (!id) throw new Error("`id` is required");

	var data = args.data;
	if (!data) throw new Error("`data` is required");

	var success = args.success || _success;
	var error = args.error || _error;
	var invalid = args.invalid || _error;
	var radio = dreamer.app.radio;
	var user_id = args.user_id;

	var status = args.status || 'draft';

	var item, fields, item_data, collection;

	await {
		var deferrals = new Deferrals(defer(), defer());

		Item.find({
			id: id,
			error: error,
			success: function(_item) {
				item = _item;
				collection = item._collection;
				fields = collection.fields;
				deferrals.run();
			}
		});

		ItemData.find({
			item_id: id,
			success: function(_item_data) {
				item_data = _item_data;
				deferrals.run();
			}
		});
	}

	fields.forEach(function(field) {
		item_data[field.name] = item_data[field.id];
		delete item_data[field.id];
	});

	fields.forEach(function(field) {
		if (field.name in data) {
			item_data[field.name] = data[field.name];
		}
	});

	fields.forEach(function(field) {
		if (field.control.normalize) {
			item_data[field.name] = field.control.normalize(item_data[field.name]);
		}
	});

	var errors = Item._validate({
		fields: fields,
		data: item_data
	});

	if (errors) {
		item._errors = errors;

		fields.forEach(function(field) {
			if (field.name in item_data) {
				item[field.name] = item_data[field.name];
			}
		});

		return invalid(item);
	}

	var storable_item_data = {};

	fields.forEach(function(field) {
		if (field.name in item_data) {
			storable_item_data[field.id] = item_data[field.name];
		}
	});

	await {

		var deferrals = new Deferrals(defer(), defer());

		ItemData.update({
			item: item,
			user_id: user_id,
			data: storable_item_data,
			error: error,
			success: function() {
				deferrals.run();
			}
		});

		item.update_time = new Date();
		item.status = status;

		item.save()
			.error(error)
			.success(function(_item) {
				item = _item;
				deferrals.run();
			});
	}

	Item.find({
		id: item.id,
		collection_id: collection.id,
		success: function(item) {
			success(item);
			radio.emit('itemUpdate', item);
		}
	});
};

Item.distill = function(item) {
	delete item._collection;
	delete item.active_status;
	delete item.collection_id;
	return item;
};

Item.loadRevisions = function(args) {

	var item_id = args.item_id;

	var success = args.success;
	var error = args.error || console.warn;

	models.item_data_revisions.findAll({
		order: 'id desc',
		where: { item_id: item_id }
	})
		.error(error)
		.success(function(revisions) {

			revisions = JSON.parse(JSON.stringify(revisions));

			models.users.findAll()
				.error(error)
				.success(function(users) {
					revisions.forEach(function(revision) {
						var user = users
							.filter(function(u) { return u.id == revision.user_id; })
							.shift();
						revision.username = user.username || 'unknown';
						revision.data = revision.data.slice(0, 60);
						revision.relative_time = moment(revision.create_time).fromNow();
					});
					success(revisions);
				});
		});

};

Item.loadRevision = function(args) {

	var item_id = args.item_id;
	var revision_id = args.revision_id;

	var success = args.success;
	var error = args.error || console.warn;

	models.item_data_revisions.find({ where: { id: revision_id } })
		.error(error)
		.success(function(revision) {
			models.users.find({ where: { id: revision.user_id } })
				.error(error)
				.success(function(user) {
					revision.username = user.username;
					revision.relative_time = moment(revision.create_time).fromNow();
					success(revision);
				});
		});
};

Item.restore = function(args) {

	var revision_id = args.revision_id;
	var item_id = args.id;
	var success = args.success;
	var error = args.error || console.warn;
	var user_id = args.user_id;

	Item.find({
		id: item_id,
		error: error,
		success: function(item) {

			models.item_data_revisions.find(revision_id)
				.error(error)
				.success(function(revision) {
					var data = JSON.parse(revision.data);
					ItemData.update({
						user_id: user_id,
						id: item_id,
						item: item,
						data: data,
						success: success,
						error: error
					});
				});
		}
	});

};

module.exports = Item;

