var async = require('async');
var armrest = require('armrest');
var Deferrals = require('../lib/deferrals');
var Item = require('../lib/item');

var Entity = require('../lib/entity.tjs');
var EXAMPLE_LENGTH = 1500;

exports.initialize = function(app) {

	var models = app.dreamer.models;
	var workspaceLoader = app.flight.workspaceLoader;

	app.get('/api/:workspace_handle/:entity_handle', workspaceLoader, function(req, res) {

		var name = req.params.entity_handle;
		var per_page = req.query.per_page || 40;
		var page = req.query.page || 0;
		var entity, items;
		var workspace = req.flight.workspace;

		await {
			var deferrals = new Deferrals(defer());

			Entity.find({
				name: name,
				error: req.error,
				workspace_handle: workspace.handle,
				success: function(_entity) {
					entity = _entity;
					deferrals.run();
				}
			});
		}

		if (!entity) {
			return req.error(404, "collection not found");
		}

		var criteria = {};

		entity.fields.forEach(function(field) {
			if (field.name in req.query) {
				criteria[field.name] = req.query[field.name];
			}
		});

		await {
			var deferrals = new Deferrals(defer());

			Item.findAll({
				entity_id: entity.id,
				criteria: criteria,
				page: page,
				per_page: per_page,
				error: req.error,
				success: function(_items, totalCount) {
					items = _items;
					deferrals.run();
				}
			});
		}

		items.forEach(function(item) {
			item._entity = entity;
		});

		async.forEach(items, function(item, callback) {

			Item._inflate(item, function(item) {
				callback();
			});

		}, function() {

			items.forEach(function(item) {
				item = Item.distill(item);
			});

			var totalCount = items.totalCount;
			var content_range = "items 0-" + (totalCount - 1) + "/" + totalCount;

			res.header('Content-Range', content_range);
			res.json(items);
		});
	});

	app.get('/api/:entity_key/:id', function(req, res) {

		var id = req.params.id;
		var name = req.params.entity_key;

		var entity, item;

		await {
			var deferrals = new Deferrals(defer());

			Entity.find({
				name: name,
				error: req.error,
				success: function(_entity) {
					entity = _entity;
					deferrals.run();
				}
			});
		}

		await {
			var deferrals = new Deferrals(defer());
			Item.findAll({
				criteria:{ id: id },
				entity_id: entity.id,
				success: function(items) {
					item = items.shift();
					deferrals.run();
				}
			});
		}

		if (!item) {
			res.json(404, { error: "not found" });
		} else {
			res.json(Item.distill(item));
		}

	});

	app.post('/api/:entity_key', function(req, res) {

		var name = req.params.entity_key;
		var entity;

		await {
			var deferrals = new Deferrals(defer());

			Entity.find({
				name: name,
				error: req.error,
				success: function(_entity) {
					entity = _entity;
					deferrals.run();
				}
			});
		}

		var data = {};

		entity.fields.forEach(function(field) {
			data[field.name] = String(req.body[field.name]);
		});

		Item.create({
			entity_id: entity.id,
			data: data,
			success: function(item) {
				var location = '/api/' + name + '/' + item.id;
				res.location(location);
				res.json(201, { id: item.id } );
			},
			invalid: function(item) { res.json(400, { errors: item._errors } ); },
			error: function(error) { res.json(500, error); }
		});
	});

	app.post('/api/:entity_key/:entity_item_id', function(req, res) {

		var name = req.params.entity_key;
		var entity_item_id = req.params.entity_item_id;
		var entity;

		await {
			var deferrals = new Deferrals(defer());

			Entity.find({
				name: name,
				error: req.error,
				success: function(_entity) {
					entity = _entity;
					deferrals.run();
				}
			});
		}

		var data = {};

		entity.fields.forEach(function(field) {
			data[field.name] = String(req.body[field.name]);
		});

		Item.update({
			id: entity_item_id,
			entity_id: entity.id,
			data: data,
			success: function(item) { res.json(200, { id: item.id } ); },
			invalid: function(item) { res.json(400, { errors: item._errors } ); },
			error: function(error) { res.json(500, error); }
		});
	});

	app.get ('/workspaces/:workspace_handle/api', workspaceLoader, function(req, res) {

		var workspace = req.flight.workspace;
		var api = armrest.client("localhost:" + app.get('port'));

		Entity.findAll({
			workspace_handle: workspace.handle,
			success: function(entities) {

				var entity_resources = [];

				async.forEach(entities, function(entity, cb) {

					var route = '/api/' + workspace.handle  + '/' + entity.name;

					api.get({
						url: route,
						params: { per_page: 1 },
						success: function(items, response) {

							var resources = [];
							resources.entity = entity;

							var example_response = response.body;
							if (example_response && example_response.length > EXAMPLE_LENGTH) {
								example_response = example_response.substring(0, EXAMPLE_LENGTH) + '...';
							}

							var resource = {
								method: 'GET',
								route: route,
								preview: route,
								description: 'Get a listing of ' + entity.title.toLowerCase(),
								example_uri: route
							};

							if (response.body !== '[]') {
								resource.example_response = example_response;
							}

							resources.push(resource);

							var write_resource = {
								method: 'POST',
								route: route,
								description: 'Create ' + entity.title.toLowerCase(),
								parameters: entity.fields
							}

							resources.push(write_resource);

							entity_resources.push(resources);
							cb();
						}
					});

				}, function() {
					entity_resources = entity_resources.sort(function(a, b) { return a.entity.title.localeCompare(b.entity.title); });
					res.render("api.html", { entity_resources: entity_resources });
				});

			}
		});
	});
};

