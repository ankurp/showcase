var dreamer = require('dreamer').instance;
var models = dreamer.models;
var Deferrals = require('./deferrals');
var Entity = require('./entity.tjs');
var Fields = require('./fields.js');
var validators = require('validator').validators;

var _success = function(data) { flatten(data); };
var _error = function(err) { console.warn(err); };

var Item = function(args) {};

Item.find = function(args) {

	var entity_id = args.entity_id;
	var id = args.id;

	var item, entity;

	var success = args.success || _success;
	var error = args.error || _error;

	await {

		var deferrals = new Deferrals(defer(), defer());

		models.entity_items.find({ where: { id: id } })
			.error(error)
			.success(function(_item) {
				item = _item;
				deferrals.run();
			});

		models.entity_item_data.find({ where: { entity_item_id: id } })
			.error(error)
			.success(function(_item_data) {
				item_data = _item_data;
				deferrals.run();
			});
	}

	item.data = item_data;

	await {

		var deferrals = new Deferrals(defer());

		Entity.find({
			id: item.entity_id,
			success: function(_entity) {
				entity = _entity;
				deferrals.run();
			}
		});
	}

	var data = JSON.parse(item_data.data);

	for (k in data) { 
		item[k] = data[k];
	}

	item.entity = entity;
	success(item);
};

Item.findAll = function(args) {

	var items, entity;

	var entity_id = args.entity_id;

	var success = args.success || _success;
	var error = args.error || _error;

	await {
		var deferrals = new Deferrals(defer());

		models.entity_items.findAll({ where: { entity_id: entity_id } })
			.error(error)
			.success(function(_items) {
				items = _items;
				deferrals.run();
			});
	}

	await {
		var deferrals = new Deferrals(defer());

		Entity.find({
			id: entity_id,
			success: function(_entity) {
				entity = _entity;
				deferrals.run();
			}
		});
	}

	await {
		var deferrals = new Deferrals(defer());

		var ids = items.map(function(i) { return i.id; });

		models.entity_item_data.findAll({ where: { entity_item_id: ids } })
			.success(function(item_data) {

				items = JSON.parse(JSON.stringify(items));
				items.forEach(function(item) {

					var data = JSON.parse(
						item_data
							.filter(function(d) { return d.entity_item_id == item.id; })
							.shift().data
					);

					for (k in data) {
						item[k] = data[k];
					}
				});

				deferrals.run();
			});
	}

	items.entity = entity;
	success(items);
};

Item.destroy = function() {

	var success = args.success || _success;
	var error = args.error || _error;

	models.entity_items.find({ where: { id: item_id } })
		.error(error)
		.success(function(entity) {
			entity.destroy()
				.error(error)
				.success(sucess);
		});
};

Item.create = function(args) {

	var entity_id = args.entity_id;
	var data = args.data;

	var success = args.success || _success;
	var error = args.error || _error;
	var invalid = args.invalid || _error;

	var item, entity;

	await {
		var deferrals = new Deferrals(defer());

		Entity.find({
			id: entity_id,
			success: function(_entity) {
				entity = _entity;
				deferrals.run();
			}
		});
	}

	var item_data = {};

	entity.fields.forEach(function(field) {
		item_data[field.name] = data[field.name];
	});	

	var errors = Item._validate({
		fields: entity.fields,
		data: item_data
	});

	if (errors) {
		item.errors = errors;
		return invalid(item);
	}

	var item = models.entity_items.build({ entity_id: entity_id });

	await {
		var deferrals = new Deferrals(defer());

		item.save()
			.error(error)
			.success(function(item) {

				var data = models.entity_item_data.build({
					entity_item_id: item.id,
					data: JSON.stringify(item_data),
					content_type: 'application/json'
				});

				data.save()
					.error(error)
					.success(function() {
						deferrals.run();
					});
			});
	}

	success(item);
}

Item._validate = function(args) {

	var fields = args.fields;
	var data = args.data;
	var errors = {};

	fields.forEach(function(field) {

		if (field.is_required) {
			if (validators.isEmpty(data[field.name])) {
				errors[field.name] = "Required";
				return;
			}
		}

		var is_valid = validators[field.control.validator](data[field.name]);

		if (!is_valid) {
			errors[field.name] = "Failed assertion: " + field.control.validator;
		}
	});

	console.log("ERRORS:", errors);

	return Object.keys(errors).length ? errors : null;
}

Item.update = function(args) {

	var id = args.id;
	var data = args.data;

	var success = args.success || _success;
	var error = args.error || _error;
	var invalid = args.invalid || _error;

	var item, fields;

	await {
		var deferrals = new Deferrals(defer());

		Item.find({
			id: id,
			error: error,
			success: function(_item) {
				item = _item;
				entity = item.entity;
				fields = entity.fields;
				deferrals.run();
			}
		});
	}

	var item_data = JSON.parse(item.data.data);

	fields.forEach(function(field) {
		item_data[field.name] = data[field.name];
	});

	var errors = Item._validate({
		fields: fields,
		data: item_data
	});

	if (errors) {
		item.errors = errors;
		return invalid(item);
	}

	item.data.data = JSON.stringify(item_data);

	await {

		var deferrals = new Deferrals(defer(), defer());

		item.data.save()
			.error(error)
			.success(function(data) {
				deferrals.run();
			});

		item.update_time = new Date();

		item.save()
			.error(error)
			.success(function(item) {

				var data = models.entity_item_data.build({
					entity_item_id: item.id,
					data: JSON.stringify(item_data),
					content_type: 'application/json'
				});

				deferrals.run();
			});
	}

	success(item);
};

module.exports = Item;

