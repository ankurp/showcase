var async = require('async');
var Pagination = require('pagination').ItemPaginator;

var Deferrals = require('../lib/deferrals');
var Entity = require('../lib/entity');
var Item = require('../lib/item');

exports.initialize = function(app) {

	var models = app.dreamer.models;
	var workspaceLoader = app.showcase.middleware.workspaceLoader;
	var workspaceEditor = app.showcase.middleware.workspacePermission('editor');

	app.del("/workspaces/:workspace_handle/collections/:entity_id/items/:item_id", workspaceLoader, workspaceEditor, function(req, res) {

		var entity_id = req.params.entity_id;
		var item_id = req.params.item_id;
		var workspace = req.showcase.workspace;

		Item.destroy({
			id: item_id,
			error: req.error,
			success: function(item) {
				res.redirect("/workspaces/" + workspace.handle + "/collections/" + entity_id + "/items");
			}
		});
	});

	app.get("/workspaces/:workspace_handle/collections/:entity_id/items", workspaceLoader, workspaceEditor, function(req, res) {

		var entity_id = req.params.entity_id;
		var page = Number(req.query.page) || 1;
		var per_page = 10;

		Item.findAll({
			entity_id: entity_id,
			error: req.error,
			page: page,
			per_page: per_page,
			success: function(items) {

				var pagination = new Pagination({
					rowsPerPage: per_page,
					totalResult: items.totalCount,
					current: page
				});

				pagination.data = pagination.getPaginationData();
				pagination.data.prelink = pagination.preparePreLink(pagination.data.prelink);

				items.forEach(function(item) {
					item = Item._preview(item, items.entity);
					Object.keys(item).forEach(function(key) {
						if (typeof item[key] == 'string') {
							if (item[key].length > 255) {
								item[key] = item[key].substring(0, 127) + '...';
							} 
						}
					});
				});

				res.render("items.html", { 
					items: items,
					entity: items.entity,
					fields: items.entity.fields,
					pagination: pagination.data
				});
			}
		});
	});

	app.get("/workspaces/:workspace_handle/collections/:entity_id/items/:entity_item_id/edit", workspaceLoader, workspaceEditor, function(req, res) {

		var entity_id = req.params.entity_id;
		var entity_item_id = req.params.entity_item_id;

		var entity, item, fields, item_data;

		Item.find({
			id: entity_item_id,
			error: req.error,
			success: function(item) {

				var action = 'Edit';

				var fields = item._entity.fields;

				res.render("item.html", {
					item: item,
					entity: item._entity,
					fields: item._entity.fields,
					action: action
				});
			}
		});
	});

	app.post("/workspaces/:workspace_handle/collections/:entity_id/items/:entity_item_id/edit", workspaceLoader, workspaceEditor, function(req, res) {

		var entity_id = req.params.entity_id;
		var entity_item_id = req.params.entity_item_id;
		var status = req.body._status;
		var workspace = req.showcase.workspace;

		Item.update({
			id: entity_item_id,
			status: status,
			data: req.body,
			error: req.error,
			invalid: function(item) {

				var action = "Edit";

				var fields = item._entity.fields;

				res.render("item.html", {
					item: item,
					errors: item._errors,
					entity: item._entity,
					fields: fields,
					action: action
				});
			},
			success: function() {
				req.flash('info', 'Saved item #' + entity_item_id);
				res.redirect("/workspaces/" + workspace.handle + "/collections/" + entity_id + "/items");
			}
		});
	});

	app.get("/workspaces/:workspace_handle/collections/:entity_id/items/new", workspaceLoader, workspaceEditor, function(req, res) {

		var entity_id = req.params.entity_id;

		Entity.find({
			id: entity_id,		
			error: req.error,
			success: function(entity) {

				res.render("item.html", {
					entity: entity,
					fields: entity.fields,
					action: 'New'
				});
			}
		});
	});

	app.post("/workspaces/:workspace_handle/collections/:entity_id/items/new", workspaceLoader, workspaceEditor, function(req, res) {

		var entity_id = req.params.entity_id;
		var status = req.body._status;
		var workspace = req.showcase.workspace;

		Item.create({
			entity_id: entity_id,
			status: status,
			data: req.body,
			error: req.error,
			invalid: function(item) {

				var action = "New";

				var fields = item._entity.fields;

				res.render("item.html", {
					item: item,
					errors: item._errors,
					entity: item._entity,
					fields: fields,
					actions: actions
				});
			},
			success: function(item) {
				req.flash('info', "Created item");
				res.redirect("/workspaces/" + workspace.handle + "/collections/" + entity_id + "/items");
			}
		});
	});
};
