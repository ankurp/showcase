var dreamer = require('dreamer').instance;
var models = dreamer.models;
var Deferrals = require('./deferrals');
var async = require('async');
var controls = require('./fields').controls;

var flatten = function(data) { return JSON.parse(JSON.stringify(data)); };

var _success = function(data) { flatten(data); };
var _error = function(err) { console.warn(err); };

var Entity = function(args) {};

Entity.field_attribute_names = [ 'id', 'title', 'name', 'data_type', 'description', 'is_required', 'index' ];

Entity.find = function(args) {

	var entity_id = args.id;
	var entity_name = args.name;

	var criteria = {};

	if (entity_id) { criteria.id = entity_id; }
	if (entity_name) { criteria.name = entity_name; }

	var success = args.success || _success;
	var error = args.error || _error;

	var entity, fields;

	await {
		var deferrals = new Deferrals(defer());

		models.entities.find({ where: criteria })
			.error(error)
			.success(function(_entity) {
				entity = _entity;
				deferrals.run();
			});
	}

	if (!entity) {
		error({ error: "collection not found" });
	}

	await {
		var deferrals = new Deferrals(defer());

		models.entity_fields.findAll({ where: { entity_id: entity.id }, order: '`index`' })
			.error(error)
			.success(function(_fields) {
				fields = _fields;
				deferrals.run();
			});
	}

	entity = flatten(entity);
	entity.fields = flatten(fields);

	entity.fields.forEach(function(field) {
		field.control = controls.filter(function(c) {
			return c.name == field.data_type;
		}).shift();
		if (!field.control) {
			console.warn("couldn't find control: " + field.data_type);
		}
	});

	success(entity);
};

Entity.findAll = function(args) {

	var success = args.success || _success;
	var error = args.error || _error;

	var entities, fields;

	var workspace_handle = args.workspace_handle;

	await {

		var deferrals = new Deferrals(defer(), defer());

		models.entities.findAll({ where: { workspace_handle: workspace_handle } })
			.error(error)
			.success(function(_entities) { 
				entities = _entities;
				deferrals.run();
			});

		models.entity_fields.findAll()
			.error(error)
			.success(function(_fields) {
				fields = _fields;
				deferrals.run();
			});
	}

	var entity_map = {};

	entities.forEach(function(entity) {
		entity_map[entity.id] = entity;
	});

	fields.forEach(function(field) {

		var entity = entity_map[field.entity_id];
		if (!entity) return;

		entity.fields = entity.fields || [];
		entity.fields.push(field);
	});

	success(entities);
}

Entity.itemCounts = function(args) {

	var success = args.success || _success;
	var error = args.error || _error;

	var query = "select entity_id, count(*) as count from entity_items group by 1";

	dreamer.db.query(query)
		.error(error)
		.success(function(rows) {

			var counts = {};
			rows.forEach(function(row) {
				counts[row.entity_id] = row.count;
			});

			success(counts);
		});
}

Entity.destroy = function(args) {

	var success = args.success || _success;
	var error = args.error || _error;

	var entity_id = args.id;

	models.entities.find({ where: { id: entity_id } })
		.error(error)
		.success(function(entity) {
			entity.destroy().success(success);
		});
}

Entity.create = function(args) {

	var success = args.success || _success;
	var error = args.error || _error;

	var entity_data = {
		title: args.title,
		description: args.description,
		name: args.name,
		workspace_handle: args.workspace_handle
	}

	var fields = args.fields;

	var entity = models.entities.build(entity_data);

	entity.save()
		.error(error)
		.success(function(entity) {

			async.forEach(fields, function(field_data, callback) {

				field_data.entity_id = entity.id;
				delete field_data.id;

				var field = models.entity_fields.build(field_data);
				field.save()
					.success(callback)
					.error(error);

			}, function() {
				success(entity);
			});
		});
};

Entity.update = function(args) {

	var success = args.success || _success;
	var error = args.error || _error;

	var entity_id = args.id;
	var entity, saved_entity, saved_fields;

	await {
		var deferrals = new Deferrals(defer(), defer());

		models.entities.find({ where: { id: entity_id } })
			.error(error)
			.success(function(_entity) {
				saved_entity = _entity;
				deferrals.run();
			});

		models.entity_fields.findAll({ where: { entity_id: entity_id }, order: '`index`' })
			.error(error)
			.success(function(_fields) {
				saved_fields = _fields;
				deferrals.run();
			});
	}

	var entity_data = {
		title: args.title,
		description: args.description,
		name: args.name
	};

	['title', 'description', 'name'].forEach( function(key) {
		saved_entity[key] = entity_data[key];
	});

	var fields = args.fields;

	saved_entity.save()
		.error(error)
		.success(function(_entity) {

			entity = _entity;

			var changes = { additions: [], deletions: [], modifications: [] };

			fields.forEach(function(field) {
				var match = saved_fields
					.filter(function(f) { return field.id && field.id == f.id; } )
					.shift();

				if (!match) changes.additions.push(field);
			});

			saved_fields.forEach(function(field) {
				var match = fields
					.filter(function(f) { return field.id == f.id; } )
					.shift();

				if (!match) {
					changes.deletions.push(field);
				} else {
					Entity.field_attribute_names.forEach(function(name) {
						if (field[name] != match[name]) {
							field[name] = match[name];
							changes.modifications[field.id] = field;
						}
					});
				}
			});

			changes.modifications = Object.keys(changes.modifications)
				.map(function(k) { return changes.modifications[k]; });

			await {

				changes.deletions.forEach(function(deletion) {
					var deferral = defer();
					models.entity_fields.find({ where: { id: deletion.id } })
						.error(error)
						.success(function(field) { 
							field.destroy()
								.error(error)
								.success(function() { deferral(); });
						});
				});

				changes.modifications.forEach(function(modification) {
					var deferral = defer();
					models.entity_fields.find({ where: { id: modification.id } })
						.error(error)
						.success(function(field) {
							field.updateAttributes(modification);
							field.save()
								.error(error)
								.success(function() { deferral(); });
						});
				});

				changes.additions.forEach(function(addition) {
					var deferral = defer();
					delete addition.id;
					var field = models.entity_fields.build(addition);
					field.save()
						.error(error)
						.success(function() { deferral(); });
				});
			}

			success(entity);
		});
};

module.exports = Entity;

